{"version":3,"file":"preload.js","mappings":";;;;;;;;;;AAAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,mBAAO,CAAC,0BAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://declutterme/external node-commonjs \"electron\"","webpack://declutterme/webpack/bootstrap","webpack://declutterme/./src/preload.ts"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst electron_1 = require(\"electron\");\n// Expose APIs from Electron to the renderer process\nelectron_1.contextBridge.exposeInMainWorld('electron', {\n    // File scanning\n    startScan: (directoryPath) => electron_1.ipcRenderer.invoke('start-scan', directoryPath),\n    getScanProgress: (callback) => {\n        const subscription = (_event, progress) => callback(progress);\n        electron_1.ipcRenderer.on('scan-progress', subscription);\n        const unsubscribe = () => {\n            electron_1.ipcRenderer.removeListener('scan-progress', subscription);\n        };\n        return unsubscribe;\n    },\n    // File organization\n    organizeFiles: (files) => electron_1.ipcRenderer.invoke('organize-files', files),\n    undoLastMove: () => electron_1.ipcRenderer.invoke('undo-last-move'),\n    getHistory: () => electron_1.ipcRenderer.invoke('get-history'),\n    // File system operations\n    selectDirectory: () => electron_1.ipcRenderer.invoke('select-directory'),\n    getFileStats: (path) => electron_1.ipcRenderer.invoke('get-file-stats', path),\n    // Settings management\n    saveSettings: (settings) => electron_1.ipcRenderer.invoke('save-settings', settings),\n    getSettings: () => electron_1.ipcRenderer.invoke('get-settings'),\n    // App info\n    getAppVersion: () => electron_1.ipcRenderer.invoke('get-app-version'),\n});\n"],"names":[],"sourceRoot":""}